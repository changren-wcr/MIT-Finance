0
00:00:00,000 --> 00:00:00,695


1
00:00:00,695 --> 00:00:02,070
PROFESSOR: Dynamic programming is

2
00:00:02,070 --> 00:00:05,970
the name given to a set of techniques

3
00:00:05,970 --> 00:00:09,600
that help us recursively formulate an optimal solution

4
00:00:09,600 --> 00:00:11,550
to a multi-period problem.

5
00:00:11,550 --> 00:00:15,480
When we looked at our initial portfolio optimization problem,

6
00:00:15,480 --> 00:00:19,050
for example, we looked at it as a single period problem.

7
00:00:19,050 --> 00:00:22,500
But often we have multiple problems.

8
00:00:22,500 --> 00:00:25,470
And it may be the case that the solution

9
00:00:25,470 --> 00:00:28,350
to the multiple problem is not just

10
00:00:28,350 --> 00:00:30,780
a sequence of short-term solutions

11
00:00:30,780 --> 00:00:33,550
to one period problems.

12
00:00:33,550 --> 00:00:37,350
So the idea is that's due to Bellman

13
00:00:37,350 --> 00:00:39,900
and draws on a lot of classical mathematics

14
00:00:39,900 --> 00:00:44,280
that's much earlier, is to think about a sequence of decisions.

15
00:00:44,280 --> 00:00:47,280
And we'd like to minimize some overall objective function

16
00:00:47,280 --> 00:00:50,640
by the time we've completed our assigned task, which

17
00:00:50,640 --> 00:00:52,290
could be on a finite horizon.

18
00:00:52,290 --> 00:00:55,750
As it often is, it might be an indefinite task that goes on.

19
00:00:55,750 --> 00:00:58,800
And then we need to minimize the long range running average.

20
00:00:58,800 --> 00:01:01,980
The observation that's key for dynamic programming

21
00:01:01,980 --> 00:01:04,660
is that we can set up problems recursively

22
00:01:04,660 --> 00:01:08,190
so that in each time period, the decision that

23
00:01:08,190 --> 00:01:10,320
needs to be made, based on the information

24
00:01:10,320 --> 00:01:13,890
set and the state variables where we currently are

25
00:01:13,890 --> 00:01:16,440
and the problem to be solved over the remaining

26
00:01:16,440 --> 00:01:19,980
period of time has the same structural form in each time

27
00:01:19,980 --> 00:01:20,650
period.

28
00:01:20,650 --> 00:01:22,920
So that as we evolve forward in time,

29
00:01:22,920 --> 00:01:25,950
we get to solve the same problem again and again and again.

30
00:01:25,950 --> 00:01:28,020
And a typical solution to that is

31
00:01:28,020 --> 00:01:30,720
obtained by starting at the end where

32
00:01:30,720 --> 00:01:34,020
we have to complete our task and working our way backwards,

33
00:01:34,020 --> 00:01:39,390
taking advantage of this common structure in each time period.

34
00:01:39,390 --> 00:01:41,970
We might think of this applying this is to problem say,

35
00:01:41,970 --> 00:01:43,650
in portfolio re-balancing.

36
00:01:43,650 --> 00:01:45,720
We might have a particular period

37
00:01:45,720 --> 00:01:48,160
where we set up an optimal portfolio,

38
00:01:48,160 --> 00:01:50,340
say for the next month or the next quarter.

39
00:01:50,340 --> 00:01:52,470
At the end of the quarter, we find out

40
00:01:52,470 --> 00:01:54,900
that our portfolio is no longer optimal.

41
00:01:54,900 --> 00:01:57,930
Either our forecasts have changed for future expected

42
00:01:57,930 --> 00:01:59,370
returns and variances.

43
00:01:59,370 --> 00:02:01,650
Or simply, the market prices have moved.

44
00:02:01,650 --> 00:02:03,300
And our weight allocations aren't where

45
00:02:03,300 --> 00:02:04,860
they were initially.

46
00:02:04,860 --> 00:02:07,530
So should we re-balance while there are

47
00:02:07,530 --> 00:02:09,750
costs associated with doing so?

48
00:02:09,750 --> 00:02:11,460
And should we have known better?

49
00:02:11,460 --> 00:02:14,070
Maybe if we knew that the costs were going to move,

50
00:02:14,070 --> 00:02:16,950
we could have taken that into account ahead of time

51
00:02:16,950 --> 00:02:20,220
and managed our positions a bit better so

52
00:02:20,220 --> 00:02:23,190
that we don't incur repeated transaction costs where we're

53
00:02:23,190 --> 00:02:25,800
constantly catching up if some of that

54
00:02:25,800 --> 00:02:27,490
might have been foreseeable.

55
00:02:27,490 --> 00:02:29,460
So what we'd like to do is have a balance

56
00:02:29,460 --> 00:02:31,950
between these short term decisions, where

57
00:02:31,950 --> 00:02:36,540
we could re-optimize step by step in a global perspective.

58
00:02:36,540 --> 00:02:40,110
What we really want to solve is the optimal long term problem.

59
00:02:40,110 --> 00:02:42,150
We're particularly interested in the case

60
00:02:42,150 --> 00:02:44,220
with a solution to the global problem

61
00:02:44,220 --> 00:02:47,700
might differ from taking a short term perspective.

62
00:02:47,700 --> 00:02:51,850


63
00:02:51,850 --> 00:02:53,730
So here's a simple example.

64
00:02:53,730 --> 00:02:56,850
Suppose I have a grid and I want to start at one point

65
00:02:56,850 --> 00:02:57,870
and finish at another.

66
00:02:57,870 --> 00:02:59,580
I want to start at the green point.

67
00:02:59,580 --> 00:03:01,530
I want to finish the red point.

68
00:03:01,530 --> 00:03:05,880
And let's assume that I'm allowed to move along the grid

69
00:03:05,880 --> 00:03:08,430
and I would like to find the path of minimum length.

70
00:03:08,430 --> 00:03:10,300
And in fact, it might not be unique.

71
00:03:10,300 --> 00:03:13,140
So let's see if we could find the number of minimum length

72
00:03:13,140 --> 00:03:15,990
paths that are available on this graph.

73
00:03:15,990 --> 00:03:18,780
And we'd like to do it with a recursive setup.

74
00:03:18,780 --> 00:03:20,430
It's typical of the way in which we'll

75
00:03:20,430 --> 00:03:22,840
set up our dynamic programming problems.

76
00:03:22,840 --> 00:03:24,450
Now let's assume that because we want

77
00:03:24,450 --> 00:03:28,410
to get from S to F, that we probably don't want

78
00:03:28,410 --> 00:03:30,430
paths to retrace our steps.

79
00:03:30,430 --> 00:03:32,390
So let's assume just to simplify that, we're

80
00:03:32,390 --> 00:03:35,035
going to require our paths either to go up or do

81
00:03:35,035 --> 00:03:36,660
the right, that there's not going to be

82
00:03:36,660 --> 00:03:38,222
any backtracking involved.

83
00:03:38,222 --> 00:03:39,930
And you can show of course, it's not hard

84
00:03:39,930 --> 00:03:42,760
in this case see that that should be true.

85
00:03:42,760 --> 00:03:46,210
So how do we set this up/ Well, first of all,

86
00:03:46,210 --> 00:03:49,680
we'd like to think of a one-step relationship that at any given

87
00:03:49,680 --> 00:03:53,850
node on this graph, given by coordinates i and j,

88
00:03:53,850 --> 00:03:58,940
the number of paths to reach that node say a point here--

89
00:03:58,940 --> 00:04:02,310
let's see if we can get our pointer--

90
00:04:02,310 --> 00:04:06,810
our point here let's say, is equal to the number of paths

91
00:04:06,810 --> 00:04:09,480
that enter from below plus the number that

92
00:04:09,480 --> 00:04:10,870
enter from the left.

93
00:04:10,870 --> 00:04:13,580
So there are two ways that we could get to a given point.

94
00:04:13,580 --> 00:04:16,500
So however many ways that we're here, these paths

95
00:04:16,500 --> 00:04:18,480
could all move into the node over here.

96
00:04:18,480 --> 00:04:21,540
And I can get to this point by coming from the left

97
00:04:21,540 --> 00:04:23,470
or by coming up from below.

98
00:04:23,470 --> 00:04:27,150
So that's characterized here as a number of paths

99
00:04:27,150 --> 00:04:29,040
into a given point, is the number

100
00:04:29,040 --> 00:04:32,580
that come from below plus the number that come from the left.

101
00:04:32,580 --> 00:04:37,460


102
00:04:37,460 --> 00:04:39,720
Next we have a boundary condition.

103
00:04:39,720 --> 00:04:45,530
So on the edges of the graph, defined

104
00:04:45,530 --> 00:04:47,120
by my starting and ending points,

105
00:04:47,120 --> 00:04:48,660
there's only one way to get there.

106
00:04:48,660 --> 00:04:50,780
That is by not allowing backtracking.

107
00:04:50,780 --> 00:04:54,200
So if on the left edge, I just came up from below-- not

108
00:04:54,200 --> 00:04:57,990
allowed to come from above from anywhere else,

109
00:04:57,990 --> 00:05:00,170
and similarly on the left-hand side

110
00:05:00,170 --> 00:05:01,710
and on the top of the graph.

111
00:05:01,710 --> 00:05:05,960
So these provide boundary conditions.

112
00:05:05,960 --> 00:05:08,620
So here's the procedure that we have to solve.

113
00:05:08,620 --> 00:05:13,090
First, let's label each boundary node with a 1.

114
00:05:13,090 --> 00:05:14,840
Because there's only one way to get there.

115
00:05:14,840 --> 00:05:17,830
So each of these points has only one path

116
00:05:17,830 --> 00:05:19,533
from the start to get there.

117
00:05:19,533 --> 00:05:20,950
Because they're on the boundaries.

118
00:05:20,950 --> 00:05:23,880
I can only go up, or I can move to the right.

119
00:05:23,880 --> 00:05:25,240
I'm not allowed to go down.

120
00:05:25,240 --> 00:05:26,870
I'm not allowed to go to the left.

121
00:05:26,870 --> 00:05:28,630
So these have only one point to get.

122
00:05:28,630 --> 00:05:32,230
There then for each interior node,

123
00:05:32,230 --> 00:05:35,320
as I move into the interior, I assign

124
00:05:35,320 --> 00:05:38,490
to each node the sum of the values that come from the point

125
00:05:38,490 --> 00:05:40,970
to the left and from the point below.

126
00:05:40,970 --> 00:05:43,210
And as I fill in the graph in this way,

127
00:05:43,210 --> 00:05:46,390
I can find what the total number of paths

128
00:05:46,390 --> 00:05:48,585
is that lead to my terminal point.

129
00:05:48,585 --> 00:05:52,930
And in this case, it's equal to 15.

130
00:05:52,930 --> 00:05:54,980
Here's another example.

131
00:05:54,980 --> 00:05:57,550
Suppose that we want to go from the top of this graph

132
00:05:57,550 --> 00:05:58,900
down to the bottom.

133
00:05:58,900 --> 00:06:00,100
And we can take a path.

134
00:06:00,100 --> 00:06:02,650
At each point, we can move either to the left or the right

135
00:06:02,650 --> 00:06:04,060
as we move down.

136
00:06:04,060 --> 00:06:06,700
Each node is associated with a number.

137
00:06:06,700 --> 00:06:11,630
And like a typical game of this type,

138
00:06:11,630 --> 00:06:13,550
let's assume that we collect a score that's

139
00:06:13,550 --> 00:06:16,580
associated with the number of points on each node.

140
00:06:16,580 --> 00:06:20,360
So let's assume that we have a path that as we traverse

141
00:06:20,360 --> 00:06:23,800
it and go down, we are entitled to collect

142
00:06:23,800 --> 00:06:25,910
the sum of the points along the different nodes

143
00:06:25,910 --> 00:06:27,270
that we encounter.

144
00:06:27,270 --> 00:06:28,200
So here's your chance.

145
00:06:28,200 --> 00:06:31,160
Why don't you pause the video right here,

146
00:06:31,160 --> 00:06:35,030
and see if you can find what's the optimal number that you can

147
00:06:35,030 --> 00:06:37,660
find going from top to bottom.

148
00:06:37,660 --> 00:06:40,760
What's the largest sum that you can find in parts where

149
00:06:40,760 --> 00:06:43,910
you add up the values that you encounter

150
00:06:43,910 --> 00:06:46,750
as you move from top to bottom?

151
00:06:46,750 --> 00:06:48,000


