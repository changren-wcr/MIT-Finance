0
00:00:00,000 --> 00:00:01,680
PROFESSOR: So the portfolios that

1
00:00:01,680 --> 00:00:04,230
show up when we're using only equality constraints

2
00:00:04,230 --> 00:00:06,900
have these issues where the weights are unbounded

3
00:00:06,900 --> 00:00:08,189
and they could be anywhere.

4
00:00:08,189 --> 00:00:10,650
They might happen to be at small, reasonable-looking

5
00:00:10,650 --> 00:00:11,670
values.

6
00:00:11,670 --> 00:00:14,280
But there's no guarantee of that,

7
00:00:14,280 --> 00:00:16,950
and it's interesting to see what happens when we

8
00:00:16,950 --> 00:00:19,380
impose inequality constraints.

9
00:00:19,380 --> 00:00:21,120
For one thing, we often have to.

10
00:00:21,120 --> 00:00:22,920
Those are just the rules of the game--

11
00:00:22,920 --> 00:00:26,130
the financial constraints, the investment mandate

12
00:00:26,130 --> 00:00:27,810
doesn't permit us to use the discretion

13
00:00:27,810 --> 00:00:29,850
to do something that mathematically

14
00:00:29,850 --> 00:00:31,170
appears to be optimal.

15
00:00:31,170 --> 00:00:33,970
But it also raises an interesting perspective,

16
00:00:33,970 --> 00:00:37,230
which is if these constraints do become binding,

17
00:00:37,230 --> 00:00:38,460
how much are we giving up?

18
00:00:38,460 --> 00:00:43,830
What is the cost of our distance from true optimality if we were

19
00:00:43,830 --> 00:00:45,210
to remove those constraints?

20
00:00:45,210 --> 00:00:47,465
After all, if we really had confidence

21
00:00:47,465 --> 00:00:48,840
and we really knew where we were,

22
00:00:48,840 --> 00:00:51,480
we might advocate for lifting the constraints

23
00:00:51,480 --> 00:00:54,400
if we could show that the benefit was great

24
00:00:54,400 --> 00:00:58,230
and, in fact, that we had a better risk-adjusted return,

25
00:00:58,230 --> 00:01:03,060
possibly even lower risk, by relaxing the constraints.

26
00:01:03,060 --> 00:01:04,739
We're thinking about this not only,

27
00:01:04,739 --> 00:01:07,950
how do I get an answer if I've got tighter constraints,

28
00:01:07,950 --> 00:01:09,190
but what does it mean?

29
00:01:09,190 --> 00:01:10,470
How does it compare?

30
00:01:10,470 --> 00:01:11,610
What am I giving up?

31
00:01:11,610 --> 00:01:14,700
How can I look at a perspective on this and thinking

32
00:01:14,700 --> 00:01:17,070
about the set of all possible investment

33
00:01:17,070 --> 00:01:18,670
portfolios one might have?

34
00:01:18,670 --> 00:01:20,520
And of course, we're talking very concretely

35
00:01:20,520 --> 00:01:22,860
about portfolio optimization, but this applies

36
00:01:22,860 --> 00:01:24,930
to many, many other kinds--

37
00:01:24,930 --> 00:01:27,030
the lessons apply to many, many other kinds

38
00:01:27,030 --> 00:01:29,620
of constraint optimization.

39
00:01:29,620 --> 00:01:31,680
So let's take a look at what happens.

40
00:01:31,680 --> 00:01:33,720
And what we want to do is let's start

41
00:01:33,720 --> 00:01:37,050
by imposing the most typical kind of constraint,

42
00:01:37,050 --> 00:01:38,970
which is the "no short, no leverage" rule.

43
00:01:38,970 --> 00:01:41,670
That is, the weights have to be strictly bounded

44
00:01:41,670 --> 00:01:43,740
between 0 and 1.

45
00:01:43,740 --> 00:01:45,690
So we might want them to be smaller.

46
00:01:45,690 --> 00:01:47,610
You can take the code and rerun that.

47
00:01:47,610 --> 00:01:49,970
Let's just apply that fairly loose constraint.

48
00:01:49,970 --> 00:01:52,800
But we already expect that it'll be binding in this case

49
00:01:52,800 --> 00:01:55,840
because we saw that minimum variance portfolio already,

50
00:01:55,840 --> 00:01:57,882
which is going to have highly-leveraged leveraged

51
00:01:57,882 --> 00:01:59,500
positions and short positions.

52
00:01:59,500 --> 00:02:02,700
So the way we do this is using the technique

53
00:02:02,700 --> 00:02:08,280
of quadratic programming, and you can read about it

54
00:02:08,280 --> 00:02:09,630
in the Help files.

55
00:02:09,630 --> 00:02:14,250
The function in R is called "solve.QP" from this library.

56
00:02:14,250 --> 00:02:16,980
And let me show you the code, and you'll

57
00:02:16,980 --> 00:02:19,110
want to read the code in conjunction

58
00:02:19,110 --> 00:02:21,060
with the documentation.

59
00:02:21,060 --> 00:02:22,060
But let's take a look.

60
00:02:22,060 --> 00:02:26,010
So the inputs to this sample program that we have

61
00:02:26,010 --> 00:02:28,200
are going to include a covariance matrix.

62
00:02:28,200 --> 00:02:30,970
They're going to include a vector of expected returns.

63
00:02:30,970 --> 00:02:33,780
And they're going to include a couple of things

64
00:02:33,780 --> 00:02:34,947
we want to pay attention to.

65
00:02:34,947 --> 00:02:36,530
I mean, that's what we need coming in.

66
00:02:36,530 --> 00:02:38,970
We want to know how many points we're going to compute.

67
00:02:38,970 --> 00:02:42,630
But we want to pay attention to the minimum and maximum values

68
00:02:42,630 --> 00:02:45,840
of mu because if we're not allowing our portfolios to be

69
00:02:45,840 --> 00:02:49,170
leveraged, then the highest possible return we could get,

70
00:02:49,170 --> 00:02:54,840
our mu sub p, is going to be the biggest return among our assets

71
00:02:54,840 --> 00:02:57,600
because the highest return we could get without leverage

72
00:02:57,600 --> 00:02:59,740
is putting all our eggs in one basket.

73
00:02:59,740 --> 00:03:03,330
We find the portfolio that's got the highest return,

74
00:03:03,330 --> 00:03:04,960
and there's only one way to get it,

75
00:03:04,960 --> 00:03:07,300
which is putting hundreds of our assets there.

76
00:03:07,300 --> 00:03:10,560
Similarly at the other end, minimum variance portfolio,

77
00:03:10,560 --> 00:03:12,180
it's going to be--

78
00:03:12,180 --> 00:03:15,540
depending on the covariance, we may find something

79
00:03:15,540 --> 00:03:18,520
at this special point on here.

80
00:03:18,520 --> 00:03:22,050
So we always want to look at identifying special points

81
00:03:22,050 --> 00:03:24,952
whether they're symmetries or whether they're endpoints.

82
00:03:24,952 --> 00:03:26,910
But let's just prepare our data and take a look

83
00:03:26,910 --> 00:03:28,510
at what's going to happen.

84
00:03:28,510 --> 00:03:33,660
So we're going to require the quadratic programming.

85
00:03:33,660 --> 00:03:35,850
We put that inside the function in case

86
00:03:35,850 --> 00:03:37,440
you didn't load it beforehand.

87
00:03:37,440 --> 00:03:39,130
It doesn't really matter that much.

88
00:03:39,130 --> 00:03:43,602
We're going to define Nu, the size of our universe,

89
00:03:43,602 --> 00:03:45,060
to be the number of points we have.

90
00:03:45,060 --> 00:03:47,070
We know in this example it's going to be 8.

91
00:03:47,070 --> 00:03:51,150
We define a Iota to be a vector of 1s of equal length.

92
00:03:51,150 --> 00:03:53,850
And we define Zero, just for convenience

93
00:03:53,850 --> 00:03:57,630
below, to be a vector of the same length just filled 0s.

94
00:03:57,630 --> 00:03:59,440
Now, I'm going to define a constraint,

95
00:03:59,440 --> 00:04:03,390
a little fudge parameter called epsilon.

96
00:04:03,390 --> 00:04:06,510
And the idea is that we want to avoid rounding errors.

97
00:04:06,510 --> 00:04:09,960
And because we're going to take a look starting at the lowest

98
00:04:09,960 --> 00:04:12,510
possible return and incrementing our way all the way up

99
00:04:12,510 --> 00:04:15,000
to the highest return in the portfolio,

100
00:04:15,000 --> 00:04:16,950
if we're off by a little bit, we might

101
00:04:16,950 --> 00:04:19,980
end up with an unfeasible constraint,

102
00:04:19,980 --> 00:04:21,209
or infeasible constraint.

103
00:04:21,209 --> 00:04:23,670
That is, if we're off by a little bit in our rounding

104
00:04:23,670 --> 00:04:27,540
and we ask for a portfolio that has a return just even

105
00:04:27,540 --> 00:04:31,050
a tiny amount more than the largest expected

106
00:04:31,050 --> 00:04:34,007
return in our input set, there won't be a solution.

107
00:04:34,007 --> 00:04:36,090
So what we'll do is we'll just nudge the endpoints

108
00:04:36,090 --> 00:04:37,170
down a little bit.

109
00:04:37,170 --> 00:04:40,350
And you can set this parameter to be anything you'd like.

110
00:04:40,350 --> 00:04:42,660
This level seems to work OK.

111
00:04:42,660 --> 00:04:45,210
Now, the documentation is dense.

112
00:04:45,210 --> 00:04:48,000
They've packed a lot into one thing,

113
00:04:48,000 --> 00:04:50,590
and I'll let you look at the code in the construction.

114
00:04:50,590 --> 00:04:52,447
But this is what goes into it.

115
00:04:52,447 --> 00:04:54,030
There are a whole bunch of constraints

116
00:04:54,030 --> 00:04:56,250
that are simultaneously going into the program,

117
00:04:56,250 --> 00:04:59,655
and they're all formulated in terms of specifying, putting

118
00:04:59,655 --> 00:05:02,893
the-- coding the data into a matrix and into a vector.

119
00:05:02,893 --> 00:05:04,060
So what are the constraints?

120
00:05:04,060 --> 00:05:05,130
Let's just talk about them.

121
00:05:05,130 --> 00:05:07,060
And as I said, you can read the documentation,

122
00:05:07,060 --> 00:05:08,768
and you can look at this particular setup

123
00:05:08,768 --> 00:05:10,610
where it's implemented in one case.

124
00:05:10,610 --> 00:05:11,870
Then, you can do your own.

125
00:05:11,870 --> 00:05:14,120
We've got a budget constraint, so the weights

126
00:05:14,120 --> 00:05:15,760
have to sum to 1.

127
00:05:15,760 --> 00:05:19,180
We have a return constraint because what we're going to do

128
00:05:19,180 --> 00:05:20,980
is we're going to solve the problem,

129
00:05:20,980 --> 00:05:24,310
find the minimum variance for a given level of mu,

130
00:05:24,310 --> 00:05:27,370
and then we're going to look at varying mu all the way up

131
00:05:27,370 --> 00:05:29,650
to our maximum value of mu.

132
00:05:29,650 --> 00:05:31,930
We have a lower bound on our individual weights,

133
00:05:31,930 --> 00:05:34,270
and we have an upper bound on the individual weights.

134
00:05:34,270 --> 00:05:36,950
And those are just for individual components.

135
00:05:36,950 --> 00:05:40,400
Now, it's possible to add additional rules as well,

136
00:05:40,400 --> 00:05:43,540
such as constraints on linear combinations for the weights

137
00:05:43,540 --> 00:05:46,700
that I mentioned in our introduction.

138
00:05:46,700 --> 00:05:51,550
So this thing, the A matrix here as defined--

139
00:05:51,550 --> 00:05:56,080
cbind in R is a function that binds columns.

140
00:05:56,080 --> 00:05:58,910
It takes columns and creates a bigger object.

141
00:05:58,910 --> 00:06:01,570
So this is just the conventions required for the program.

142
00:06:01,570 --> 00:06:04,030
This is not a particularly interesting

143
00:06:04,030 --> 00:06:05,870
mathematical object.

144
00:06:05,870 --> 00:06:07,450
So it has one column with the Iotas,

145
00:06:07,450 --> 00:06:10,360
the second column with the mus, and these other things

146
00:06:10,360 --> 00:06:11,440
that are here.

147
00:06:11,440 --> 00:06:13,610
And as I said, you can check that.

148
00:06:13,610 --> 00:06:15,580
Now, the next thing we want to do

149
00:06:15,580 --> 00:06:17,650
are we want to set up the endpoints.

150
00:06:17,650 --> 00:06:20,650
And here, we're defining mu_min and mu_max,

151
00:06:20,650 --> 00:06:23,770
and these are just ways of taking a look, at making sure

152
00:06:23,770 --> 00:06:26,650
that we nudge the endpoints a little bit

153
00:06:26,650 --> 00:06:29,880
by an amount that's proportional to the range that's here.

154
00:06:29,880 --> 00:06:32,290
So these are just some reasonable values.

155
00:06:32,290 --> 00:06:34,240
You could set them in different ways.

156
00:06:34,240 --> 00:06:38,075
Then, we're going to set up for three things

157
00:06:38,075 --> 00:06:38,950
that we want to have.

158
00:06:38,950 --> 00:06:41,020
We're going to have the sigma_p will

159
00:06:41,020 --> 00:06:44,710
be the standard deviation of the optimal portfolio

160
00:06:44,710 --> 00:06:48,250
of a particular value of mu sub p.

161
00:06:48,250 --> 00:06:51,190
We're going to walk through a range of mu sub p's.

162
00:06:51,190 --> 00:06:53,260
So in this line we generate that.

163
00:06:53,260 --> 00:06:55,480
This is using the sequence command in R.

164
00:06:55,480 --> 00:06:57,880
It just generate a list of numbers.

165
00:06:57,880 --> 00:06:58,870
It generates an array.

166
00:06:58,870 --> 00:07:01,780
And you can find similar things in Python and other languages,

167
00:07:01,780 --> 00:07:04,270
or you can build it yourself because we're

168
00:07:04,270 --> 00:07:06,800
going to use that in the for loop in just a moment.

169
00:07:06,800 --> 00:07:08,388
And then, w is going to be where we're

170
00:07:08,388 --> 00:07:10,180
going to put the weights because, remember,

171
00:07:10,180 --> 00:07:13,720
we usually are looking for the location of the extrema.

172
00:07:13,720 --> 00:07:16,360
But we also can find the value of the extrema.

173
00:07:16,360 --> 00:07:19,983
So when it comes to the efficient return frontier,

174
00:07:19,983 --> 00:07:21,400
it's a little bit of an exception.

175
00:07:21,400 --> 00:07:23,690
We usually are looking at a dimensional plot.

176
00:07:23,690 --> 00:07:26,830
We're not thinking of the 8- or 500-dimensional space

177
00:07:26,830 --> 00:07:29,780
that we started with, but we can capture everything.

178
00:07:29,780 --> 00:07:32,230
So these variables are defined sigma and w

179
00:07:32,230 --> 00:07:34,930
as placeholders where we're going to put the results.

180
00:07:34,930 --> 00:07:35,750
So what do we do?

181
00:07:35,750 --> 00:07:38,050
We're going to run through a for loop,

182
00:07:38,050 --> 00:07:40,660
and we're going to go through for each of the points

183
00:07:40,660 --> 00:07:41,620
that we have here.

184
00:07:41,620 --> 00:07:45,220
These are increments, so we'll count our way up in steps mu.

185
00:07:45,220 --> 00:07:49,600
This b vector is defined in the documentation.

186
00:07:49,600 --> 00:07:53,350
It's going to involve a 1 for one of the constraints.

187
00:07:53,350 --> 00:07:56,770
And here, with changes in each pass through for loop,

188
00:07:56,770 --> 00:07:59,620
it's going to be the mu sub p that we're solving for.

189
00:07:59,620 --> 00:08:01,540
Remember, that's how we did analytically

190
00:08:01,540 --> 00:08:02,800
our original problem.

191
00:08:02,800 --> 00:08:04,510
We fixed the mu sub p.

192
00:08:04,510 --> 00:08:07,390
Then, we minimized the variance subject to the constraint

193
00:08:07,390 --> 00:08:11,440
that the portfolio return be equal to that given mu sub p.

194
00:08:11,440 --> 00:08:14,797
And then, our results are a function of mu sub p.

195
00:08:14,797 --> 00:08:16,630
Here, what we're going to do is just compute

196
00:08:16,630 --> 00:08:18,460
for a bunch of discrete mu sub p's

197
00:08:18,460 --> 00:08:21,160
and then capture all the data.

198
00:08:21,160 --> 00:08:22,970
Here is the line.

199
00:08:22,970 --> 00:08:27,440
This is the work horse that does the actual calculations.

200
00:08:27,440 --> 00:08:30,250
So this is solve.QP.

201
00:08:30,250 --> 00:08:32,417
It takes these inputs, the covariance matrix,

202
00:08:32,417 --> 00:08:33,834
and a bunch of constant parameters

203
00:08:33,834 --> 00:08:36,520
that we have that have all been defined.

204
00:08:36,520 --> 00:08:38,030
And what are the outputs?

205
00:08:38,030 --> 00:08:40,390
So we put them into an object called opt,

206
00:08:40,390 --> 00:08:42,220
and there are two things that we want.

207
00:08:42,220 --> 00:08:47,690
One of them is opt, the value part of it,

208
00:08:47,690 --> 00:08:49,180
which is picking this off.

209
00:08:49,180 --> 00:08:53,770
We use the notation "opt$value" because opt is a complex object

210
00:08:53,770 --> 00:08:55,480
and it has different pieces.

211
00:08:55,480 --> 00:08:58,570
The amount that we have for the opt value

212
00:08:58,570 --> 00:09:01,210
is the value at the location of the maximum

213
00:09:01,210 --> 00:09:05,380
of the original function, which is 1/2 w transposed cw.

214
00:09:05,380 --> 00:09:07,998
We're interested in sigma, so we multiply by 2

215
00:09:07,998 --> 00:09:09,040
and take the square root.

216
00:09:09,040 --> 00:09:11,230
That gives us our standard deviation

217
00:09:11,230 --> 00:09:12,490
in the appropriate units.

218
00:09:12,490 --> 00:09:14,530
And we want the weights, and that's

219
00:09:14,530 --> 00:09:16,000
what's called "solution."

220
00:09:16,000 --> 00:09:21,525
And we're going to put them into this array w, into this matrix.

221
00:09:21,525 --> 00:09:23,650
And then finally, we're going to report everything,

222
00:09:23,650 --> 00:09:26,620
and we're going to put it into this variable called

223
00:09:26,620 --> 00:09:29,800
mvef for mean variance efficient frontier.

224
00:09:29,800 --> 00:09:31,750
And we set up a data frame where we

225
00:09:31,750 --> 00:09:33,530
bring these objects together.

226
00:09:33,530 --> 00:09:38,470
We've got the portfolio returns, the associated mu sub p's

227
00:09:38,470 --> 00:09:42,740
for which we solve the problem, and the weights.

228
00:09:42,740 --> 00:09:46,140
So let's see what the results look like.

