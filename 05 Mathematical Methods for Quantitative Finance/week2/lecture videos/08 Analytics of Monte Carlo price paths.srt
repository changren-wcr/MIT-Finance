0
00:00:00,000 --> 00:00:01,190


1
00:00:01,190 --> 00:00:02,690
PROFESSOR: Now, how do we apply this

2
00:00:02,690 --> 00:00:05,610
to real world modeling for asset price dynamics?

3
00:00:05,610 --> 00:00:10,880
So, a typical model and kind of the most common model

4
00:00:10,880 --> 00:00:14,120
in finance and in applications like option pricing,

5
00:00:14,120 --> 00:00:18,980
is to start with the idea that returns are lognormally

6
00:00:18,980 --> 00:00:19,640
distributed.

7
00:00:19,640 --> 00:00:23,480
That is the logarithmic returns are normally distributed.

8
00:00:23,480 --> 00:00:25,970
And of course, whether or not this is a good model,

9
00:00:25,970 --> 00:00:27,680
is an empirical question.

10
00:00:27,680 --> 00:00:29,600
We need to look at actual data.

11
00:00:29,600 --> 00:00:31,713
But let's start here for a simulation process,

12
00:00:31,713 --> 00:00:33,380
and see what some of the paths look like

13
00:00:33,380 --> 00:00:35,600
and see what some of the consequences are.

14
00:00:35,600 --> 00:00:41,720
So we draw our returns from a lognormal distribution.

15
00:00:41,720 --> 00:00:45,350
And of course, this is the same thing as our random walk model

16
00:00:45,350 --> 00:00:50,900
that we've seen before, except so I have returns drawn

17
00:00:50,900 --> 00:00:53,630
from a normal distribution with mean mu and variance

18
00:00:53,630 --> 00:00:54,840
sigma squared.

19
00:00:54,840 --> 00:00:57,930
And that's the same as writing rt equals mu plus sigma

20
00:00:57,930 --> 00:01:01,130
zt, where z is drawn from a standardized normal

21
00:01:01,130 --> 00:01:02,400
distribution.

22
00:01:02,400 --> 00:01:04,340
Now these are logarithmic returns.

23
00:01:04,340 --> 00:01:09,110
And the returns are defined in terms of the logarithm

24
00:01:09,110 --> 00:01:10,730
of the price ratio of a day.

25
00:01:10,730 --> 00:01:13,130
And this is approximately equal to the simple return

26
00:01:13,130 --> 00:01:14,420
for small values.

27
00:01:14,420 --> 00:01:15,780
And we can invert this.

28
00:01:15,780 --> 00:01:18,530
So if we look at the recursion, we

29
00:01:18,530 --> 00:01:20,810
see that the price today is yesterday's price

30
00:01:20,810 --> 00:01:22,940
times the next return.

31
00:01:22,940 --> 00:01:25,910
And if we keep iterating backward farther and farther

32
00:01:25,910 --> 00:01:28,370
in time, we get this result, which

33
00:01:28,370 --> 00:01:30,380
we'll use as the basis for our Monte Carlo,

34
00:01:30,380 --> 00:01:33,290
namely that the price at time t, is

35
00:01:33,290 --> 00:01:37,040
equal to an initial price, P0 times the exponential

36
00:01:37,040 --> 00:01:38,960
of the sum of returns.

37
00:01:38,960 --> 00:01:42,500
And these individual r's are drawn in each period.

38
00:01:42,500 --> 00:01:43,580
We take their sum.

39
00:01:43,580 --> 00:01:48,040
We exponentiate, and that will give us the price.

40
00:01:48,040 --> 00:01:52,890
So here are the steps that we use for generating Monte Carlo

41
00:01:52,890 --> 00:01:53,820
simulations.

42
00:01:53,820 --> 00:01:55,372
We first decide what the parameters

43
00:01:55,372 --> 00:01:57,330
are for the underlying distribution-- like what

44
00:01:57,330 --> 00:01:58,260
are mu and sigma?

45
00:01:58,260 --> 00:01:59,820
Where should they come from?

46
00:01:59,820 --> 00:02:01,493
What units are they in?

47
00:02:01,493 --> 00:02:03,660
We need to scale them appropriately for the sampling

48
00:02:03,660 --> 00:02:04,240
interval.

49
00:02:04,240 --> 00:02:07,590
So typically, for example, we take mu and sigma

50
00:02:07,590 --> 00:02:10,470
to be our given annualized units.

51
00:02:10,470 --> 00:02:13,290
For example, a stock might have a 10% annual return,

52
00:02:13,290 --> 00:02:15,430
with the volatility of 30%.

53
00:02:15,430 --> 00:02:19,210
But if our individual time steps are on a one day level,

54
00:02:19,210 --> 00:02:22,440
then we need to change the parameters in order

55
00:02:22,440 --> 00:02:25,680
that they make sense for the one day period.

56
00:02:25,680 --> 00:02:29,340
Then we draw numbers from our distribution.

57
00:02:29,340 --> 00:02:34,860
We use the scaled parameters to simulate our distribution

58
00:02:34,860 --> 00:02:36,450
and how it evolves over time.

59
00:02:36,450 --> 00:02:38,370
We construct the ensemble of paths.

60
00:02:38,370 --> 00:02:42,875
And then once we've got this at say, 10,000 possible paths,

61
00:02:42,875 --> 00:02:44,750
we're going to compute analytics based on it.

62
00:02:44,750 --> 00:02:48,240
So if we want to know what the variance of the terminal

63
00:02:48,240 --> 00:02:51,000
returns is, we just compute it by taking

64
00:02:51,000 --> 00:02:56,310
the statistical calculation of the variance on the values

65
00:02:56,310 --> 00:03:00,340
that we've generated on our actual sample data.

66
00:03:00,340 --> 00:03:02,530
So here's an example of how we could do that.

67
00:03:02,530 --> 00:03:05,070
So let's take the parameters I just mentioned.

68
00:03:05,070 --> 00:03:08,170
The sigma of 0.3 has annualized volatility

69
00:03:08,170 --> 00:03:11,050
of 30%, an annualized return of 10%.

70
00:03:11,050 --> 00:03:12,570
Now how should we scale these?

71
00:03:12,570 --> 00:03:19,900
Well remember, we want the annualized return to be 10%.

72
00:03:19,900 --> 00:03:24,300
So that means since we know that if we do a whole bunch of time

73
00:03:24,300 --> 00:03:27,690
steps, we know that the mean scales linearly with time.

74
00:03:27,690 --> 00:03:30,210
That means that the return on each day

75
00:03:30,210 --> 00:03:33,960
should be mu, 10%, divided by 252,

76
00:03:33,960 --> 00:03:41,701
which we can write as mu dt.

77
00:03:41,701 --> 00:03:43,940
This Is our constant term.

78
00:03:43,940 --> 00:03:46,960
So we've re-scale the constant in our r equals

79
00:03:46,960 --> 00:03:54,490
mu plus sigma z, to be mu delta t.

80
00:03:54,490 --> 00:03:57,820
That's going to be 10% over 252.

81
00:03:57,820 --> 00:03:59,990
So over a year, we'll get the right number.

82
00:03:59,990 --> 00:04:03,310
And then for the coefficient of z,

83
00:04:03,310 --> 00:04:06,700
we need to scale by square root of t.

84
00:04:06,700 --> 00:04:09,490
So in the Monte Carlo simulation,

85
00:04:09,490 --> 00:04:12,040
we're going to take our normalized z--

86
00:04:12,040 --> 00:04:14,080
this is just drawn from a standard normalized

87
00:04:14,080 --> 00:04:15,190
distribution.

88
00:04:15,190 --> 00:04:21,350
And we multiply it times sigma times the square root of 1/252,

89
00:04:21,350 --> 00:04:23,350
which is about 15.87.

90
00:04:23,350 --> 00:04:27,010
The square root of 252 ends up showing up a lot in Monte Carlo

91
00:04:27,010 --> 00:04:28,870
simulations and in conversions.

92
00:04:28,870 --> 00:04:31,610
So it's good to get that number in mind.

93
00:04:31,610 --> 00:04:33,970
So I've written down two different ways that we could do

94
00:04:33,970 --> 00:04:37,240
this in R. One of them is simply,

95
00:04:37,240 --> 00:04:39,340
we start with normalized z's.

96
00:04:39,340 --> 00:04:40,420
And then we scale them.

97
00:04:40,420 --> 00:04:45,220
We add a constant, mu dt, plus our normalized variable z,

98
00:04:45,220 --> 00:04:48,610
times sigma square root of dt.

99
00:04:48,610 --> 00:04:50,860
Or you can use the parameters in R.

100
00:04:50,860 --> 00:04:53,740
But this ends up again, being more language-specific,

101
00:04:53,740 --> 00:04:55,600
because there are optional arguments

102
00:04:55,600 --> 00:04:57,130
for the normal distribution, where

103
00:04:57,130 --> 00:04:59,800
the first argument is the number of random numbers you want.

104
00:04:59,800 --> 00:05:01,780
The next one is what's the mean.

105
00:05:01,780 --> 00:05:02,770
The default is 0.

106
00:05:02,770 --> 00:05:05,470
The next one is what's the standard deviation, sd.

107
00:05:05,470 --> 00:05:07,060
And again, the default is 1.

108
00:05:07,060 --> 00:05:10,600
So either of these lines will produce the same numbers.

109
00:05:10,600 --> 00:05:12,930
Then we take the same thing we did before.

110
00:05:12,930 --> 00:05:16,540
S is an initialized matrix to hold

111
00:05:16,540 --> 00:05:20,440
our partial sums, our partial cumulative sums of results.

112
00:05:20,440 --> 00:05:24,820
We work through iteratively step by step--

113
00:05:24,820 --> 00:05:26,950
t from 1 up through Nt.

114
00:05:26,950 --> 00:05:29,570
And then we take our result and we exponentiate

115
00:05:29,570 --> 00:05:31,060
it to get our price paths.

116
00:05:31,060 --> 00:05:34,130
And again, I've shown you a couple of sample paths here.

117
00:05:34,130 --> 00:05:37,208
And if I told you that these were three stocks, what

118
00:05:37,208 --> 00:05:37,750
do you think?

119
00:05:37,750 --> 00:05:39,502
You might think gosh, that one in red--

120
00:05:39,502 --> 00:05:41,710
that looks like one that went for a really wild ride.

121
00:05:41,710 --> 00:05:43,720
Maybe it showed up on Reddit somewhere.

122
00:05:43,720 --> 00:05:46,450
And it rose, and it crashed and burned.

123
00:05:46,450 --> 00:05:49,450
And the green one is some company that's struggling.

124
00:05:49,450 --> 00:05:52,210
But in fact, all of these came from exactly

125
00:05:52,210 --> 00:05:53,755
the same data-generating process.

126
00:05:53,755 --> 00:05:57,970


127
00:05:57,970 --> 00:06:00,520
Now, let's take a look at some of the results

128
00:06:00,520 --> 00:06:02,177
that we have from our distribution.

129
00:06:02,177 --> 00:06:03,760
One of the things we can do-- remember

130
00:06:03,760 --> 00:06:06,430
that P holds our price paths.

131
00:06:06,430 --> 00:06:10,600
And the terminal values of the price paths,

132
00:06:10,600 --> 00:06:13,300
we started with an initial value of 1. ,

133
00:06:13,300 --> 00:06:15,100
Remember the initial return was 0.

134
00:06:15,100 --> 00:06:18,400
So we exponentiated the initial value, P0 was equal to 1.

135
00:06:18,400 --> 00:06:20,840
We could have multiplied it time some other constant.

136
00:06:20,840 --> 00:06:26,270
So the terminal value minus 1--

137
00:06:26,270 --> 00:06:30,530
the terminal value here minus 1 is the simple return

138
00:06:30,530 --> 00:06:33,090
on the stock over a one-year period.

139
00:06:33,090 --> 00:06:39,030
And we can see right here, the histogram in blue of the data.

140
00:06:39,030 --> 00:06:41,900
This is showing the distribution of one-year returns

141
00:06:41,900 --> 00:06:43,080
under our model.

142
00:06:43,080 --> 00:06:46,730
So we notice that this distribution is not normal.

143
00:06:46,730 --> 00:06:49,820
The red line is showing a normal distribution.

144
00:06:49,820 --> 00:06:54,290
But we can see that there's a positive mean.

145
00:06:54,290 --> 00:06:56,900


146
00:06:56,900 --> 00:07:01,520
And there we go.

147
00:07:01,520 --> 00:07:05,860
So we have the center of this is positive.

148
00:07:05,860 --> 00:07:07,120
There's a certain width to it.

149
00:07:07,120 --> 00:07:08,290
But it's not symmetric.

150
00:07:08,290 --> 00:07:10,690
You notice that the distribution is definitely skewed,

151
00:07:10,690 --> 00:07:12,130
with a large right tail.

152
00:07:12,130 --> 00:07:22,747
And of course, the lowest value can't be below minus 1

153
00:07:22,747 --> 00:07:23,580
for what we've done.

154
00:07:23,580 --> 00:07:25,740
Because the price can't go below 0.

155
00:07:25,740 --> 00:07:28,200
So what I've done and the red line, is I've

156
00:07:28,200 --> 00:07:31,200
compared this to a normal distribution

157
00:07:31,200 --> 00:07:34,320
that has the same empirical observed

158
00:07:34,320 --> 00:07:36,220
mean and standard deviation.

159
00:07:36,220 --> 00:07:38,015
So we can obviously see by looking at it,

160
00:07:38,015 --> 00:07:39,450
that this is not normal.

161
00:07:39,450 --> 00:07:42,330
Now remember, these are the simple returns.

162
00:07:42,330 --> 00:07:44,770
And they're not expected to be normally distributed.

163
00:07:44,770 --> 00:07:48,000
If I take the logarithm of the returns and compute,

164
00:07:48,000 --> 00:07:50,070
then things would match up rather nicely.

165
00:07:50,070 --> 00:07:53,460
But again, we could ask how nicely should they match up.

166
00:07:53,460 --> 00:07:55,860
What level of variance would I expect?

167
00:07:55,860 --> 00:07:58,890
If I had done less than 10,000 simulations,

168
00:07:58,890 --> 00:08:00,600
this would be a more ragged plot.

169
00:08:00,600 --> 00:08:02,490
If I were to do a million simulations,

170
00:08:02,490 --> 00:08:05,170
we would find it would fit quite nicely under the curve.

171
00:08:05,170 --> 00:08:08,700
So depending on our application and our patience,

172
00:08:08,700 --> 00:08:11,400
that will dictate the number of simulations that we might do.

173
00:08:11,400 --> 00:08:14,620
Now in this particular case, we do have closed form numbers.

174
00:08:14,620 --> 00:08:16,710
So we can compare, we can compute

175
00:08:16,710 --> 00:08:19,500
what the mean and standard deviation or the variance

176
00:08:19,500 --> 00:08:21,630
are with the results that you would

177
00:08:21,630 --> 00:08:25,400
get if you did a whole bunch of Gaussian intervals.

178
00:08:25,400 --> 00:08:27,740
I don't know about you, but sometimes Gaussian integrals

179
00:08:27,740 --> 00:08:29,110
can be tedious.

180
00:08:29,110 --> 00:08:31,544
Certainly, look at the answers in a book.

181
00:08:31,544 --> 00:08:33,419
But if you want to do the Gaussian integrals,

182
00:08:33,419 --> 00:08:34,355
you can do that.

183
00:08:34,355 --> 00:08:36,392
Monte Carlo simulation can be very quick.

184
00:08:36,392 --> 00:08:37,350
And we can add numbers.

185
00:08:37,350 --> 00:08:39,080
So let's see how they compare.

186
00:08:39,080 --> 00:08:41,451
And this is helpful for cases where we'll often

187
00:08:41,451 --> 00:08:43,159
apply Monte Carlos, where the closed form

188
00:08:43,159 --> 00:08:44,600
solutions are either too difficult

189
00:08:44,600 --> 00:08:46,050
or they don't even exist.

190
00:08:46,050 --> 00:08:49,430
So for example, I compute the mean empirically

191
00:08:49,430 --> 00:08:55,340
of the R's as 1.547869.

192
00:08:55,340 --> 00:08:58,070
And the theoretical result, which

193
00:08:58,070 --> 00:09:01,880
is written down below by doing the actual expectation

194
00:09:01,880 --> 00:09:05,450
and doing a Gaussian integral, the expectation in fact

195
00:09:05,450 --> 00:09:08,990
is e to the mu plus sigma squared over 2 minus 1.

196
00:09:08,990 --> 00:09:13,880
That's because the little r's are logarithmic,

197
00:09:13,880 --> 00:09:15,320
and the big R's are not.

198
00:09:15,320 --> 00:09:17,678
This is approximately-- we can expand this out

199
00:09:17,678 --> 00:09:18,470
in a Taylor series.

200
00:09:18,470 --> 00:09:20,450
But this is the exact result. And we

201
00:09:20,450 --> 00:09:24,380
can see that we're pretty good two and almost three decimal

202
00:09:24,380 --> 00:09:25,070
places--

203
00:09:25,070 --> 00:09:26,272
0.156.

204
00:09:26,272 --> 00:09:28,730
And if you run it, you'll get of course, a different number

205
00:09:28,730 --> 00:09:29,850
for the first one.

206
00:09:29,850 --> 00:09:31,070
And you can try this here.

207
00:09:31,070 --> 00:09:32,120
How about the variance?

208
00:09:32,120 --> 00:09:36,390
Well again, there's a particular result for the exact value.

209
00:09:36,390 --> 00:09:39,723
And the numbers that we get here for the standard deviation,

210
00:09:39,723 --> 00:09:42,140
I've taken the square root of the result for the variance.

211
00:09:42,140 --> 00:09:44,280
And again, these look pretty close.

212
00:09:44,280 --> 00:09:45,980
So that's the idea.

213
00:09:45,980 --> 00:09:48,570
We have two different ways of computing the same thing.

214
00:09:48,570 --> 00:09:50,750
One of them is doing a bunch of Gaussian integrals

215
00:09:50,750 --> 00:09:51,770
in closed form.

216
00:09:51,770 --> 00:09:54,590
The other one is we do a whole bunch of simulations

217
00:09:54,590 --> 00:09:55,910
on the computer, and then take.

218
00:09:55,910 --> 00:09:57,770
Some averages and standard deviations.

219
00:09:57,770 --> 00:10:00,270
You notice that compared to the doing

220
00:10:00,270 --> 00:10:01,820
a Gaussian integrals, which is fun

221
00:10:01,820 --> 00:10:03,110
if you like doing integrals.

222
00:10:03,110 --> 00:10:06,290
But here, we have a little bit more

223
00:10:06,290 --> 00:10:09,170
when we do some visualizations, a little bit more idea as

224
00:10:09,170 --> 00:10:10,070
to what's going on.

225
00:10:10,070 --> 00:10:11,227
Like here's the spread.

226
00:10:11,227 --> 00:10:13,310
These are all the things that could have happened.

227
00:10:13,310 --> 00:10:16,260
Sometimes the individual price paths can look really striking,

228
00:10:16,260 --> 00:10:19,880
and we can learn some things by looking at our data.

229
00:10:19,880 --> 00:10:20,750
We can keep going.

230
00:10:20,750 --> 00:10:23,940
This is the empirical cumulative density function,

231
00:10:23,940 --> 00:10:25,490
which can be done in R. It depends

232
00:10:25,490 --> 00:10:29,960
on how we do it as a plot of the cumulative distribution

233
00:10:29,960 --> 00:10:32,480
function, which is equivalent to integrating up

234
00:10:32,480 --> 00:10:34,520
the integral from the left.

235
00:10:34,520 --> 00:10:37,760
And another quick and dirty way of looking

236
00:10:37,760 --> 00:10:41,180
at the data, sort of a transpose the previous one,

237
00:10:41,180 --> 00:10:44,470
is to plot the sorted returns.

238
00:10:44,470 --> 00:10:46,640
So I've done that here this command

239
00:10:46,640 --> 00:10:50,420
will work in R, that we can use do a bar

240
00:10:50,420 --> 00:10:55,040
plot or any plotting package you want in R or another language,

241
00:10:55,040 --> 00:10:57,420
where I sort the returns in order--

242
00:10:57,420 --> 00:10:59,810
remember that the Monte Carlo, the 10,000 paths

243
00:10:59,810 --> 00:11:01,820
we're not ordered in a particular way.

244
00:11:01,820 --> 00:11:04,950
Let me sort them in the outcomes from lowest to highest.

245
00:11:04,950 --> 00:11:07,532
And this is a different way of visualizing the distribution.

246
00:11:07,532 --> 00:11:08,990
This is actually an interesting way

247
00:11:08,990 --> 00:11:11,250
of looking at actual financial returns.

248
00:11:11,250 --> 00:11:13,490
So we see that we go from smallest to largest.

249
00:11:13,490 --> 00:11:16,280
And we get a characteristic kind of S-shaped curve.

250
00:11:16,280 --> 00:11:19,820
And we can see there are big outliers on the upper end

251
00:11:19,820 --> 00:11:21,980
of the distribution.

252
00:11:21,980 --> 00:11:24,110
We can also take a look at things

253
00:11:24,110 --> 00:11:25,970
to compare to a normal distribution.

254
00:11:25,970 --> 00:11:31,130
A Q-Q plot-- in this case, Q-Q norm is a special case in R.

255
00:11:31,130 --> 00:11:35,780
But a Q-Q plot typically lets us visualize a comparison of two

256
00:11:35,780 --> 00:11:37,610
probability distributions.

257
00:11:37,610 --> 00:11:41,415
And the idea is that if in this case, where

258
00:11:41,415 --> 00:11:43,290
we're comparing with the normal distribution,

259
00:11:43,290 --> 00:11:46,980
if the data were normal, it would lie on a straight line.

260
00:11:46,980 --> 00:11:49,200
Q-Q plots are especially helpful if we're

261
00:11:49,200 --> 00:11:53,170
looking at deviations in the tails of the distribution.

262
00:11:53,170 --> 00:11:55,170
A histogram is not so great for looking

263
00:11:55,170 --> 00:11:59,040
at outliers in the tails, because the tails are small.

264
00:11:59,040 --> 00:12:00,360
Rare events are rare.

265
00:12:00,360 --> 00:12:03,420
And visually, they're going to show up as maybe 0 or 1

266
00:12:03,420 --> 00:12:05,250
pixels on our screen.

267
00:12:05,250 --> 00:12:08,610
A Q-Q plot emphasizes the tails and it

268
00:12:08,610 --> 00:12:10,440
keeps the boring stuff in the middle, which

269
00:12:10,440 --> 00:12:12,520
is most of the data, of course.

270
00:12:12,520 --> 00:12:17,070
But typically, the middle of any Q-Q plot

271
00:12:17,070 --> 00:12:20,280
is going to look like a straight line somewhere.

272
00:12:20,280 --> 00:12:22,170
And then the deviations in the tails

273
00:12:22,170 --> 00:12:24,960
tell us something characteristic about how we depart

274
00:12:24,960 --> 00:12:29,090
from normality, potentially.

